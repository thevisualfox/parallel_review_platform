import { useEffect, useState, useCallback } from 'react';

var config = {
    attributes: true,
    characterData: true,
    subtree: true,
    childList: true
};
/**
 *
 * useMutationObserver hook
 *
 * Returns a mutation observer for a React Ref and fires a callback
 *
 * @param {MutableRefObject<HTMLElement | null>} ref React ref on which mutations are to be observed
 * @param {MutationCallback} callback Function that needs to be fired on mutation
 * @param {MutationObserverInit} options
 */
function useMutationObserver(ref, callback, options = config) {
    useEffect(() => {
        // Create an observer instance linked to the callback function
        if (ref.current) {
            const observer = new MutationObserver(callback);
            // Start observing the target node for configured mutations
            observer.observe(ref.current, options);
            return () => {
                observer.disconnect();
            };
        }
    }, [callback, options]);
}

/**
 * useDidMount hook
 * Calls a function on mount
 *
 * @param {function} callback Callback function to be called on mount
 */
function useDidMount(callback) {
    useEffect(() => {
        if (typeof callback === "function") {
            callback();
        }
    }, []);
}

/**
 * @param element HTML element whose boundingclientrect is needed
 * @return ClientRect
 */
function getBoundingClientRect(element) {
    return element.getBoundingClientRect();
}
/**
 * useBoundingclientRect hook
 * @param ref The React ref whose ClientRect is needed
 * @return ClientRect
 */
function useBoundingclientrect(ref) {
    const [value, setValue] = useState(null);
    const update = useCallback(() => {
        setValue(ref.current ? getBoundingClientRect(ref.current) : null);
    }, []);
    useDidMount(() => {
        update();
    });
    useMutationObserver(ref, update);
    return value;
}

export default useBoundingclientrect;
//# sourceMappingURL=index.esm.js.map
